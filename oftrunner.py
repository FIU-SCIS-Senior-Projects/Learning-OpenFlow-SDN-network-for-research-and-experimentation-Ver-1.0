'''
Author: Jahkell Lazarre
Description: Parser responsible for generating a JSON log from the XML output
generated by a run of OFTest.
License: GPL 

TODO:
  - implement profile
  - implement CSV exporter
  - implement config file (JSON)
'''

from ConfigParser import ConfigParser
from time import strftime
import json
from multiprocessing import Process
import os
import shlex
import subprocess
import sys
import xml.etree.ElementTree as ET

CONFIG_FILENAME = '/home/mininet/oftest/oftrunner/.config'
config = {}

def load_config():

    # Load configuration file.
    config_file = ConfigParser()
    config_file.read(CONFIG_FILENAME)
    timestamp = strftime(config_file.get('GENERAL','TIMESTAMP_FORMAT'))

    # Full JSON report path.
    config['JSON_REPORT_PATH'] = config_file.get('REPORT', 'DIRPATH') + config_file.get('REPORT', 'FILENAME') + timestamp + '.json'

    # OFTest XML directory path
    config['OFT_XML_DIRPATH'] = config_file.get('OFTEST', 'XML_ROOT_DIRPATH') + config_file.get('OFTEST', 'XML_DIRNAME') + timestamp + '/'

    # Construct interface command line arguments for OFTest.
    interface_cmdline_args = ' '
    interfaces = config_file.get('GENERAL', 'INTERFACES').split(',')
    for interface in interfaces:
        interface_cmdline_args += '-i ' + interface + ' ' 

    # Command line arguments.
    config['OFT_CMDLINE_ARGS'] = config_file.get('OFTEST', 'EXEC_PATH') + ' basic ' + interface_cmdline_args + '--xunit --xunit-dir=' + config['OFT_XML_DIRPATH']

    config['RS_CMDLINE_ARGS'] = config_file.get('SWITCH', 'EXEC_PATH') + ''

    # Command lines.
    config['OFT_CMDLINE'] = 'sudo ' + sys.executable + ' ' + config['OFT_CMDLINE_ARGS']

    config['RS_CMDLINE'] = 'sudo ' + sys.executable + ' ' + config['RS_CMDLINE_ARGS']

    # STDOUT and STDERR paths.
    config['OFT_STDOUT_PATH'] = config_file.get('OFTEST', 'STDOUT_DIRPATH') + config_file.get('OFTEST', 'STDOUT_FILENAME') + timestamp

    config['OFT_STDERR_PATH'] = config_file.get('OFTEST', 'STDERR_DIRPATH') + config_file.get('OFTEST', 'STDERR_FILENAME') + timestamp

    config['RS_STDOUT_PATH'] = config_file.get('SWITCH', 'STDOUT_DIRPATH') + config_file.get('SWITCH', 'STDOUT_FILENAME') + timestamp

    config['RS_STDERR_PATH'] = config_file.get('SWITCH', 'STDERR_DIRPATH') + config_file.get('SWITCH', 'STDERR_FILENAME') + timestamp

    # Timestamp.
    config['TIMESTAMP'] = timestamp
    
def parse_oft_xml(xml_path):
    '''Parse OFTest XML file generated by the --xunit option and return
    a JSON object consisting of the protocol/test name and whether the
    test passed or failed.'''

    xml_tree = ET.parse(xml_path)

    # Retrieve test suite info.
    test_suite = xml_tree.getroot()
    num_errors = int(test_suite.get('errors'))
    num_failures = int(test_suite.get('failures'))

    result = 'ok'  # ok, error, fail.

    if(num_errors > 0):
        result = 'error'

    if(num_failures > 0):
        result = 'fail'

    # Retrieve test cases info.
    test_cases = test_suite.findall('testcase')
    test_case_dicts = []

    for test_case in test_cases:
        test_case_name = test_case.get('classname')
        run_time_sec = float(test_case.get('time'))
        test_case_dicts.append({'test-case-name' : test_case_name, 'result' : result, 'num-errors' : num_errors, 'num-failures' : num_failures, 'run-time-sec' : run_time_sec})

    return test_case_dicts

def generate_json_log(oft_xml_dir, json_path):
    '''Reads and parses all OFTest-generated XML files specified in
    <xml-directory> and writes log to <json-path>.'''

    test_case_dicts = []

    # Build list of test case dictionaries by parsing every XML file in the given XML result directory.
    for (dirpath, dirnames, filenames) in os.walk(os.path.abspath(oft_xml_dir)):
        for filename in filenames:
            test_case_dicts.extend(parse_oft_xml(os.path.join(dirpath,filename)))

    # Get total run time from individual test cases.
    total_run_time_sec = 0
    
    for test_case_dict in test_case_dicts:
        total_run_time_sec += test_case_dict['run-time-sec']

    # Construct test suite dictionary.
    test_suite_dict = {'test-suite' : test_case_dicts, 'total-run-time-sec' : total_run_time_sec}

    # Write JSON log file.
    with open(json_path, 'w') as json_log_file:
        json_log = json.dumps(test_suite_dict, indent=4, separators=(',', ':'))
        json_log_file.write(json_log)

def execute_subprocess(args, stdout_redirect=None, stderr_redirect=None, stderr_to_stdout=False, check_return=True):

    subproc = subprocess.Popen(shlex.split(args), stdout=stdout_redirect, stderr=stderr_redirect, universal_newlines=True)
    stdout_data = ''
    stderr_data = ''

    try:

        if(stderr_to_stdout == True):
            stderr_lines = iter(subproc.stderr.readline, '')

            for line in stderr_lines:
                sys.stdout.write(line)
        
            subproc.stderr.close()
        
        stdout_data, stderr_data = subproc.communicate()  # Indirectly sets returncode.    
        
        if(check_return == True and subproc.returncode != 0):
            raise subprocess.CalledProcessError(subproc.returncode, args)
            
    except BaseException as e:
        subproc.kill()
        raise e 

    return stdout_data, stderr_data

def run_switch():
    '''Executes switch.'''

    with open(config['RS_STDOUT_PATH'], 'w') as rs_stdout, open(config['RS_STDERR_PATH'], 'w') as rs_stderr:
        execute_subprocess(config['RS_CMDLINE'], stdout_redirect=rs_stdout, stderr_redirect=rs_stderr)

def run_oftest():
    '''Runs OFTest.'''

    with open(config['OFT_STDOUT_PATH'], 'w') as oft_stdout, open(config['OFT_STDERR_PATH'], 'w') as oft_stderr:
        stdout_data, stderr_data = execute_subprocess(config['OFT_CMDLINE'], stdout_redirect=subprocess.PIPE, stderr_redirect=subprocess.PIPE, stderr_to_stdout=True, check_return=False)
        oft_stdout.write(stdout_data)
        oft_stderr.write(stderr_data)

def make_dirs():

    dir_paths = [
        config['JSON_REPORT_PATH'],
        config['OFT_XML_DIRPATH'],
        config['OFT_STDOUT_PATH'],
        config['OFT_STDERR_PATH'],
        config['RS_STDOUT_PATH'],
        config['RS_STDERR_PATH']
    ]

    for dir_path in dir_paths:
        os.makedirs(dir_path)

def main():
    '''Runs switch, OFTest, and produces report.'''

    #if (len(sys.argv) < 3):
    #    print("usage: python oft_parser.py <xml-directory> <json-path>")
    #    sys.exit(-1)

    #oft_xml_dir = sys.argv[1]
    #json_path = sys.argv[2]

    load_config()

    switch_process = Process(target=run_switch)
    oftest_process = Process(target=run_oftest)

    # print('JSON report path: ' + config['JSON_REPORT_PATH'])
    # print('OFTest XML directory path: ' + config['OFT_XML_DIRPATH'])
    # print('OFTest STDOUT path: ' + config['OFT_STDOUT_PATH'])
    # print('OFTest STDERR path: ' + config['OFT_STDERR_PATH'])
    # print('run_switch STDOUT path: ' + config['RS_STDOUT_PATH'])
    # print('run_switch STDERR path: ' + config['RS_STDERR_PATH'])
    # print('OFTest command line: ' + config['OFT_CMDLINE_ARGS'])

    print('Starting switch...')
    switch_process.start()

    print('Starting OFTest...')
    oftest_process.start()

    switch_process.join()
    oftest_process.join()

    print('Parsing output...')
    generate_json_log(config['OFT_XML_DIRPATH'], config['JSON_REPORT_PATH'])

    print('Done!')

if __name__ == '__main__':
    main()
