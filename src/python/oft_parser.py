"""
Author: Jahkell Lazarre
Description: Parser responsible for generating a JSON log from the XML output
generated by a run of OFTest.
License: GPL

Example Output:
{
    "test-suite" :
    [
        {"test-case-name" : someClass.SomeProtocol, "result" : "ok", "num-errors": 0, "num-failures" : 0, "run-time-sec" : 2.03},
        {"test-case-name" : someClass.SomeProtocol, "result" : "error", "num-errors": 1, "num-failures" : 0, "run-time-sec" : 6.52},
        {"test-case-name" : someClass.SomeProtocol, "result" : "fail", "num-errors": 1, "num-failures" : 1, "run-time-sec" : 3.09}
    ]
    "total-run-time-sec" : 12.04
}
"""

import json
import os
import sys
import xml.etree.ElementTree as ET

def parse_oft_xml(xml_path):
    """Parse OFTest XML file generated by the --xunit option and return
    a JSON object consisting of the protocol/test name and whether the
    test passed or failed."""

    xml_tree = ET.parse(xml_path)

    # Retrieve test suite info.
    test_suite = xml_tree.getroot()
    num_errors = int(test_suite.get("errors"))
    num_failures = int(test_suite.get("failures"))

    result = "ok"  # ok, error, fail.

    if(num_errors > 0):
        result = "error"

    if(num_failures > 0):
        result = "fail"

    # Retrieve test cases info.
    test_cases = test_suite.findall("testcase")
    test_case_dicts = []

    for test_case in test_cases:
        test_case_name = test_case.get("classname")
        run_time_sec = float(test_case.get("time"))
        test_case_dicts.append({"test-case-name" : test_case_name, "result" : result, "num-errors" : num_errors, "num-failures" : num_failures, "run-time-sec" : run_ti\
me_sec})

    return test_case_dicts

def generate_json_log(oft_xml_dir, json_path):
    """Reads and parses all OFTest-generated XML files specified in
    <xml-directory> and writes log to <json-path>."""

    test_case_dicts = []

    # Build list of test case dictionaries by parsing every XML file in the given XML result directory.
    for (dirpath, dirnames, filenames) in os.walk(os.path.abspath(oft_xml_dir)):
        for filename in filenames:
            test_case_dicts.extend(parse_oft_xml(os.path.join(dirpath,filename)))

    # Get total run time from individual test cases.
    total_run_time_sec = 0
    for test_case_dict in test_case_dicts:
        total_run_time_sec += test_case_dict["run-time-sec"]

    # Construct test suite dictionary.
    test_suite_dict = {"test-suite" : test_case_dicts, "total-run-time-sec" : total_run_time_sec}

    # Write JSON log file.
    with open(json_path, "w") as json_log_file:
        json_log = json.dumps(test_suite_dict, indent=4, separators=(',', ':'))
        json_log_file.write(json_log)

def main():

    if (len(sys.argv) < 3):
        print("usage: python oft_parser.py <xml-directory> <json-path>")
        sys.exit(-1)

    oft_xml_dir = sys.argv[1]
    json_path = sys.argv[2]

    generate_json_log(oft_xml_dir, json_path)

if __name__ == "__main__":
    main()
